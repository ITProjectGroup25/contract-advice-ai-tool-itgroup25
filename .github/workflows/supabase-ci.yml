name: Supabase CI

on:
  push:
    branches: ["**"] # Trigger on all branches
  pull_request:
    branches: ["**"] # Trigger on all PRs

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  # Optional staging credentials for feature branch testing
  SUPABASE_STAGING_ACCESS_TOKEN: ${{ secrets.SUPABASE_STAGING_ACCESS_TOKEN }}
  SUPABASE_STAGING_PROJECT_REF: ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
  SUPABASE_STAGING_DB_PASSWORD: ${{ secrets.SUPABASE_STAGING_DB_PASSWORD }}

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Authenticate Supabase CLI (staging if available)
        if: env.SUPABASE_ACCESS_TOKEN != ''
        run: |
          if [ -n "$SUPABASE_STAGING_ACCESS_TOKEN" ]; then
            supabase login --token "$SUPABASE_STAGING_ACCESS_TOKEN"
          else
            supabase login --token "$SUPABASE_ACCESS_TOKEN"
          fi

      - name: Link Supabase project (staging)
        if: env.SUPABASE_STAGING_PROJECT_REF != '' && env.SUPABASE_STAGING_DB_PASSWORD != ''
        working-directory: backend
        run: |
          supabase link --project-ref "$SUPABASE_STAGING_PROJECT_REF" --password "$SUPABASE_STAGING_DB_PASSWORD"

      - name: Link Supabase project (production)
        if: env.SUPABASE_STAGING_PROJECT_REF == '' && env.SUPABASE_PROJECT_REF != '' && env.SUPABASE_DB_PASSWORD != ''
        working-directory: backend
        run: |
          supabase link --project-ref "$SUPABASE_PROJECT_REF" --password "$SUPABASE_DB_PASSWORD"

      - name: Validate database migrations (linked)
        if: env.SUPABASE_STAGING_PROJECT_REF != '' || env.SUPABASE_PROJECT_REF != ''
        working-directory: backend
        run: |
          supabase db lint --linked --fail-on error

      - name: Validate database migrations (local fallback)
        if: env.SUPABASE_STAGING_PROJECT_REF == '' && env.SUPABASE_PROJECT_REF == ''
        working-directory: backend
        run: |
          echo "SUPABASE_PROJECT_REF not set; running local lint instead." && \
          supabase db lint --local --fail-on error

  deploy:
    needs: validate
    if: (
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/IPGCRT-79/ci-cd'))
      ) || (
      (github.event_name == 'pull_request' && github.event.pull_request.head.ref == 'IPGCRT-79/ci-cd')
      )
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Authenticate Supabase CLI
        if: env.SUPABASE_ACCESS_TOKEN != ''
        run: |
          supabase login --token "$SUPABASE_ACCESS_TOKEN"

      - name: Link Supabase project
        if: env.SUPABASE_PROJECT_REF != '' && env.SUPABASE_DB_PASSWORD != ''
        working-directory: backend
        run: |
          supabase link --project-ref "$SUPABASE_PROJECT_REF" --password "$SUPABASE_DB_PASSWORD"

      - name: Push database migrations
        working-directory: backend
        run: |
          supabase db push --linked --password "$SUPABASE_DB_PASSWORD"

      - name: Deploy edge functions
        working-directory: backend
        run: |
          if [ -d "supabase/functions" ]; then
            supabase functions deploy
          else
            echo "No supabase/functions directory found; skipping function deploy."
          fi

  # Removed staging deploy job to make IPGCRT-79/ci-cd identical to main
